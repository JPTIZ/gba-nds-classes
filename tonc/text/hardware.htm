<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html; charset=ISO-8859-1" http-equiv="content-type">
  <meta name="generator" content="Context">
  <meta name="Author" content="Cearn">
  <meta name="Created" content="2003-12-23">
  <meta name="Modified" content="2005-12-28">

  <title>Tonc: GBA Hardware</title>
  <link rel="stylesheet" type="text/css" href="tonc.css">
  <script type="text/javascript" src="tonc.js"></script>
</head>
<body onload="main();">

<!--567890123456789012345678901234567890123456789012345678901234567-->

<!-- [[header]] -->
<table class="header">
<tr>
  <td class="hdr_l"><a href="intro.htm">Introduction</a></td>
  <td class="hdr_c"><a href="toc.htm">Contents</a></td>
  <td class="hdr_r"><a href="setup.htm">Set-up</a></td>
</tr>
</table>
<!-- [[/header]] -->

<hr>

<h1 id="ch-">1.
  GBA Hardware</h1>

<!-- [[toc]] -->
<ul>
  <li><a href="#sec-intro">Meet the GBA</a>.
  <li><a href="#sec-specs">GBA Specs and Capabilities</a>.
  <li><a href="#sec-memory">Memory Sections</a>.
</ul>
<!-- [[/toc]] -->


<!-- ============================================================== -->

<h2 id="sec-intro">1.1.
  Meet the GBA</h2>
<p>
The Nintendo GameBoy Advance (GBA) is a portable games console. 
As if you didn't know already. The CPU is a 32-bit ARM7tdmi chip 
running at 16.78 MHz. It has a number of distinct memory areas 
(like work RAM, IO and video memory) which we will look into shortly. 
The games are stored on <dfn>Game Paks</dfn>, consisting of ROM for 
code and data, and fairly often some RAM for saving game info. The 
GBA has a 240x160 LCD screen capable of displaying 32768 colors 
(15 bits). Unfortunately, the screen is not back-lit, which made a 
lot of people very angry and has generally been regarded as a bad 
move. So, in 2003 Nintendo launched the GBA SP, a sort of GBA 2.0,
which features a fold-up screen reminiscent of the old Game &amp; Watch 
games (remember those? You do? Boy, you are <i>old</i>! (For the 
record, I still have mine too <code>:)</code> )). Then in came the 
final GBA version, the GBA micro, a very, very small GBA which easily 
fits in everyone's pockets. The differences the GBA, GBA-SP and Micro 
are mainly cosmetic, though, they're the same thing from a programming 
point of view.
</p><br>
<p>
The original GameBoy which took the world by storm in 1989. Not bad 
for a monochrome handheld console, eh? Later the GameBoy Color was 
released which finally put some color on the aging machine, but it 
was still very much a simple GameBoy. The true successor was the GBA, 
released in 2002. The GBA is backward compatible with the GameBoy, 
so you can play all the old GB games as well.
</p>
<p>
In terms of capabilities the GBA is a lot like the Super NES (SNES): 
15bit color, multiple background layers and hardware rotation and 
scaling. And shoulder buttons, of course. A cynic might look at the 
enormous amount of SNES ports and say that the GBA <i>is</i> a 
SNES, only portable. This is true, but you can hardly call that a 
bad thing.
</p>

<div class="cblock">
<table>
<tbody valign="top">
<tr>
<td>
  <div class="cpt" style="width:288px;">
    <img src="../img/hardware/gba.jpg" id="img-gba" 
      alt="original GBA" width=288><br>
    <b>Fig 1.1</b>: original GBA.
  </div>
</td>
<td rowspan=2>
  <div class="cpt" style="width:256px;">
    <img src="../img/hardware/gba-sp.jpg" id="img-gba-sp" 
      alt="GBA-SP" width=256><br>
    <b>Fig 1.2</b>: GBA-SP.
  </div>
</td>
</tr>
<tr><td>&nbsp;</td></tr> <!-- GBA Micro goes in here -->
</tbody>
</table>
</div>

<h2 id="sec-specs">1.2.
  GBA specs and capabilities</h2>
<p>
Below is a list of the specifications and capabilities of the GBA. This 
not a full list, but these are the most important things you need to know.
</p>

<ul>
<li>Video
  <ul>
  <li>240x160 pixel, 15bit color LCD screen. The original GBA screen was not 
  backlit, but the SP's and Micro's are.</li>
  <li>
    3 <a href="bitmaps.htm">bitmap modes</a> and 
    3 <a href="regbg.htm">tilemap modes</a> and 
	<a href="regobj.htm">sprites</a>.
  </li>
  <li>4 individual tilemap layers (backgrounds) and 128 sprites (objects).</li> 
  <li><a href="affine.htm">Affine transformations</a> (rotate/scale/shear) on 
    2 backgrounds and 32 objects.</li>
  <li><a href="gfx.htm">Special graphic effects</a>: mosaic, additive blend, 
    fade to white/black.</li>
  </ul>
</li>
<li>Sound
  <ul>
  <li>6 channels total</li>
  <li>4 tone generators from the original GameBoy: 2 square wave, 1 general 
    wave and one noise generator.</li>
  <li>2 'DirectSound' channels for playing samples and music.</li>
  </ul>
</li>
<li>Miscellaneous
  <ul>
  <li>10 buttons (or <a href="keys.htm">keys</a>): 
    4-way directional pad, 
	Select/Start, 
	fire buttons A/B, 
    shoulder buttons L/R.</li>
  <li>14 hardware interrupts.</li>
  <li>4-player multiplayer mode via a multiboot cable.</li>
  <li>Optional infrared, solar and gyroscopic interfaces. Other interfaces have 
    also been made by some.</li>
  <li>Main programming platforms: C/C++ and assembly, though there are tools for 
  Pascal, Forth, LUA and others as well. Easy to start with, yet hard to truly 
  master.</li>
  </ul>
</li>
</ul>

<p>
From a programming point of view, the GBA (or any other console
for that matter) is totally different from a PC. There is no 
operating system, no messing with drivers and hardware 
incompatibilities; it's bits as far as the eye can see. Well,
PCs are also just bits, but that's several layers down; on consoles
it's just you, the CPU and memory. Basically, it's the <a href=
"http://www.catb.org/~esr/jargon/html/R/Real-Programmer.html">Real 
Programmer</a>'s dream.
</p>
<p>
To get anything done, you use <dfn>memory-mapped IO</dfn>. Specific areas 
of memory are mapped directly to hardware functions. In the first demo, 
for example, we will write the number <code>0x0403</code> to memory 
address <code>0400:0000h</code>. This tells the GBA to enable 
background 2 and set the graphics mode to 3. What this actually 
<i>means</i> is, of course, what this tutorial is for <code>:)</code>. 
</p>

<h3 id="ssec-cpu">1.2.1.
  CPU</h3>
<p>
As said, the GBA runs on a ARM7tdmi RISC chip at 16.78 MHz 
(2<sup>24</sup> cycles/second). It is a 32bit chip that can run on 
two different instruction sets. First, there's is <dfn>ARM code</dfn>,
which is a set of 32bit instructions. 
<!--One of the nice things about
ARM instructions (and RISC in general) is that-->

Then there's <dfn>THUMB</dfn>,
which uses 16bit instructions. THUMB instructions are a subset of 
the ARM instruction set; since the instructions are shorter, the 
code can be smaller, but their power is also reduced. It is recommended 
that normal code be THUMB code in ROM, and for time-critical code to 
be ARM code and put in IWRAM. Since all tonc-demos are still rather 
simple, most (but not all) code is THUMB code.
</p>
<p>
For more information on the CPU, go to 
<a href="http://www.arm.com" target="_blank">www.arm.com</a> or to the 
<a href="asm.htm">assembly chapter</a>
</p>


<!-- ============================================================== -->

<h2 id="sec-memory">1.3.
  Memory Sections</h2>
<p>
This section lists the various memory areas. It's basically
a summary of the <a href="http://nocash.emubase.de/gbatek.htm" target="_blank">GBATek</a> 
section on memory.
</p>

<div class="cblock">
<table border=1 cellspacing=0 cellpadding=2>
<col span=8 valign= top>
<tr>
<th>area <th>start <th>end <th>length <th>port-size <th>description
<tr>
  <th>System ROM <td><code>0000:0000h</code> <td><code>0000:3FFFh</code> 
  <td>16kb  <td>32 bit
  <td>BIOS memory. You can execute it, but not read it (i.o.w, touch, 
    don't look).
<tr>
  <th>EWRAM <td><code>0200:0000h</code> <td><code>0203:FFFFh</code> 
  <td>256kb  <td>16 bit
  <td>External work RAM. Is available for your code and data. If 
    you're using a multiboot cable, this is where the downloaded code 
	goes and execution starts (normally execution starts at ROM). 
	Due to the 16bit port, you want this section's code to be THUMB 
	code.
<tr>
  <th>IWRAM <td><code>0300:0000h</code> <td><code>0300:7FFFh</code> 
  <td>32kb  <td>32 bit
  <td>This is also available for code and data. The 32-bit bus 
    and the fact that it's embedded in the CPU make this the fastest 
	memory section. The 32bit bus means that ARM instructions can 
	be loaded at once, so put your ARM code here.
<tr>
  <th>IO RAM <td><code>0400:0000h</code> <td><code>0400:03FFh</code> 
  <td>1kb  <td>16 bit
  <td>Memory-mapped IO registers. These have nothing to do with the 
    CPU registers you use in assembly so the name can be a bit 
	confusing. Don't blame me for that. This section is where you
	control graphics, sound, buttons and other features.
<tr>
  <th>PAL RAM <td><code>0500:0000h</code> <td><code>0500:03FFh</code> 
  <td>1kb  <td>16 bit
  <td>Memory for two palettes containing 256 entries of 15-bit colors
    each. The first is for backgrounds, the second for sprites.
<tr>
  <th>VRAM <td><code>0600:0000h</code> <td><code>0601:7FFFh</code>
  <td>96kb  <td>16 bit
  <td>Video RAM. This is where the data used for backgrounds and 
    sprites are stored. The interpretation of this data depends
	on a number of things, including video mode and background and 
	sprite settings.
<tr>
  <th>OAM <td><code>0700:0000h</code> <td><code>0700:03FFh</code> 
  <td>1kb  <td>32 bit
  <td>Object Attribute Memory. This is where you control the 
    sprites.
<tr>
  <th>PAK ROM<td><code>0800:0000h</code> <td>var 
  <td>var  <td>16 bit
  <td>Game Pak ROM. This is where the game is located and execution 
    starts, except when you're running from a multiboot cable.
	The size is variable, but the limit is 32 MB. It's a 16bit bus, 
	so THUMB code is preferable over ARM code here.
<tr>
  <th>Cart RAM <td><code>0E00:0000h</code> <td>var 
  <td>var  <td>8 bit
  <td>This is where saved data is stored. Cart RAM can be in the 
    form of SRAM, Flash ROM or EEPROM. Programmatically they all 
	do the same thing: store data. The total size is variable, 
	but 64kb is a good indication.
</table>
</div>

<p>
The various RAM sections (apart from Cart RAM) are zeroed 
at start-up by BIOS. The areas you will deal with them most are 
IO, PAL, VRAM and OAM. For simple games and demos it will usually 
suffice to load your graphics data into PAL and VRAM at the start 
use IO and OAM to take care of the actual interaction. The layout of
these two sections is quite complex and almost impossible to 
figure out on your own (almost, because emulator builders obviously 
have done just that). With this in mind, reference sheets like the 
<a href="http://nocash.emubase.de/gbatek.htm" target="_blank">GBATek</a> and the
<a href="http://www.cs.rit.edu/~tjh8300/CowBite/CowBiteSpec.htm" target="_blank">
CowBite Spec</a> are unmissable documents. In theory this is all
you need to get you started, but in practice using one or more 
tutorials (such as this one) with example code will save a lot of 
headaches.
</p>

<br>

<div class="endtag">
Modified <span class="time">Feb 8, 2007</span>,
<a href="mailto:cearn@coranac.com">J Vijn</a>.
Get all Tonc files <a href="http://www.coranac.com/projects/#tonc" target="_blank">here</a>
</div>

<hr>


<!-- [[footer]] -->
<table class="footer">
<tr>
  <td class="hdr_l"><a href="intro.htm">Prev</a></td>
  <td class="hdr_c"><a href="toc.htm">Contents</a></td>
  <td class="hdr_r"><a href="setup.htm">Next</a></td>
</tr>
<tr>
  <td class="hdr_l">Introduction</td>
  <td class="hdr_c"></td>
  <td class="hdr_r">Set-up</td>
</tr>
</table>
<!-- [[/footer]] -->

</body>
</html>


